# IMPLEMENTACIÓN TÉCNICA DE LA INTEGRACIÓN CON TRELLO

## 1. ARCHIVOS PRINCIPALES DE INTEGRACIÓN

### 1.1 config.py
```python
# Configuración de credenciales de Trello
TRELLO_API_KEY = os.getenv('TRELLO_API_KEY')
TRELLO_API_TOKEN = os.getenv('TRELLO_API_TOKEN')
```
Este archivo contiene las credenciales necesarias para la autenticación con la API de Trello.

### 1.2 tareas_routes.py
Este es el archivo principal que maneja la integración con Trello. Contiene las siguientes funciones clave:

```python
# Creación de tarjetas en Trello
def crear_tarjeta_trello(idBoard, nombre_tarea, descripcion):
    # Obtiene la primera lista del tablero
    url_listas = f"https://api.trello.com/1/boards/{idBoard}/lists"
    params = {"key": TRELLO_API_KEY, "token": TRELLO_API_TOKEN}
    resp = requests.get(url_listas, params=params)
    
    if resp.status_code == 200 and resp.json():
        idList = resp.json()[0]['id']
        
        # Crea la tarjeta en Trello
        url_card = "https://api.trello.com/1/cards"
        params = {
            "idList": idList,
            "name": nombre_tarea,
            "desc": descripcion,
            "key": TRELLO_API_KEY,
            "token": TRELLO_API_TOKEN
        }
        resp = requests.post(url_card, params=params)
        return resp.json()['id'] if resp.status_code == 200 else None

# Sincronización de comentarios
def agregar_comentario_trello(idCardTrello, comentario):
    url = f"https://api.trello.com/1/cards/{idCardTrello}/actions/comments"
    params = {
        "text": comentario,
        "key": TRELLO_API_KEY,
        "token": TRELLO_API_TOKEN
    }
    resp = requests.post(url, params=params)
    return resp.json() if resp.status_code == 200 else None

# Sincronización de estados
def mover_tarjeta_a_hecho(idCardTrello, equipo_id):
    # Obtiene la lista "Completado" del equipo
    conn = get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute('SELECT idBoard, idListDone FROM equipos WHERE id = %s', (equipo_id,))
    row = cursor.fetchone()
    
    if row and row['idListDone']:
        # Mueve la tarjeta a la lista de completados
        url = f"https://api.trello.com/1/cards/{idCardTrello}"
        params = {
            "idList": row['idListDone'],
            "key": TRELLO_API_KEY,
            "token": TRELLO_API_TOKEN
        }
        resp = requests.put(url, params=params)
        return resp.status_code == 200
```

### 1.3 app.py
Contiene funciones para la gestión de tableros y equipos:

```python
# Creación de tableros
def crear_tablero_trello(nombre_tablero):
    url = "https://api.trello.com/1/boards/"
    params = {
        "name": nombre_tablero,
        "key": TRELLO_API_KEY,
        "token": TRELLO_API_TOKEN
    }
    response = requests.post(url, params=params)
    
    if response.status_code == 200:
        data = response.json()
        idBoard = data['id']
        # Crea listas estándar
        listas_esenciales = ["Lista de tareas", "Pendiente", "En progreso", "Completado"]
        for nombre_lista in listas_esenciales:
            url_lista = f"https://api.trello.com/1/boards/{idBoard}/lists"
            params_lista = {"name": nombre_lista, "key": TRELLO_API_KEY, "token": TRELLO_API_TOKEN}
            requests.post(url_lista, params=params_lista)
        return idBoard
```

## 2. ESTRUCTURA DE LA BASE DE DATOS

### 2.1 Tablas Principales
```sql
-- Tabla de equipos con referencia a Trello
CREATE TABLE equipos (
    id INT PRIMARY KEY,
    nombre VARCHAR(100),
    idBoard VARCHAR(100),  -- ID del tablero en Trello
    idListDone VARCHAR(100)  -- ID de la lista de completados
);

-- Tabla de tareas con referencia a Trello
CREATE TABLE tareas_trello (
    id INT PRIMARY KEY,
    titulo VARCHAR(200),
    descripcion TEXT,
    idCardTrello VARCHAR(100),  -- ID de la tarjeta en Trello
    equipo_id INT,
    FOREIGN KEY (equipo_id) REFERENCES equipos(id)
);
```

## 3. FLUJO DE SINCRONIZACIÓN

### 3.1 Creación de Tarea
1. Usuario crea tarea en el sistema
2. Se llama a `crear_tarjeta_trello()`
3. Se guarda el ID de la tarjeta en la base de datos
4. Se notifica a los miembros del equipo

### 3.2 Actualización de Estado
1. Usuario cambia estado de tarea
2. Se llama a `mover_tarjeta_a_hecho()`
3. Se actualiza la posición de la tarjeta en Trello
4. Se sincroniza el estado en la base de datos

### 3.3 Sincronización de Comentarios
1. Usuario agrega comentario
2. Se llama a `agregar_comentario_trello()`
3. Se guarda el comentario en ambas plataformas
4. Se notifica a los miembros involucrados

## 4. ENDPOINTS DE LA API UTILIZADOS

### 4.1 Gestión de Tableros
- POST /1/boards/ - Crear tablero
- GET /1/boards/{id}/lists - Obtener listas
- POST /1/boards/{id}/lists - Crear lista

### 4.2 Gestión de Tarjetas
- POST /1/cards - Crear tarjeta
- PUT /1/cards/{id} - Actualizar tarjeta
- DELETE /1/cards/{id} - Eliminar tarjeta

### 4.3 Gestión de Comentarios
- POST /1/cards/{id}/actions/comments - Agregar comentario
- GET /1/cards/{id}/actions - Obtener comentarios

## 5. MANEJO DE ERRORES

### 5.1 Errores Comunes
- Errores de autenticación
- Límites de API excedidos
- Problemas de conexión
- Conflictos de datos

### 5.2 Estrategias de Recuperación
- Reintentos automáticos
- Sincronización manual
- Logging de errores
- Notificaciones de fallos

## 6. CONSIDERACIONES DE SEGURIDAD

### 6.1 Protección de Credenciales
- Almacenamiento en variables de entorno
- No hardcodear en el código
- Rotación periódica de tokens
- Acceso restringido a credenciales

### 6.2 Control de Acceso
- Validación de permisos
- Verificación de roles
- Auditoría de cambios
- Registro de actividades 