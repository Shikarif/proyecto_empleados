# DOCUMENTACIÓN DE LA INTEGRACIÓN CON TRELLO

## 1. CONFIGURACIÓN INICIAL

### 1.1 Requisitos Previos
- Cuenta de Trello con permisos de administrador
- API Key de Trello
- Token de acceso de Trello
- Tableros creados en Trello para cada equipo

### 1.2 Configuración de Credenciales
Las credenciales se almacenan en variables de entorno:
```python
TRELLO_API_KEY = os.getenv('TRELLO_API_KEY')
TRELLO_API_TOKEN = os.getenv('TRELLO_API_TOKEN')
```

## 2. FUNCIONALIDADES IMPLEMENTADAS

### 2.1 Sincronización de Tareas
- Creación bidireccional de tareas
- Actualización automática de estados
- Sincronización de comentarios
- Gestión de archivos adjuntos

### 2.2 Gestión de Tableros
- Creación automática de tableros por equipo
- Configuración de listas predefinidas
- Asignación de miembros a tarjetas
- Seguimiento de cambios

### 2.3 Integración de Archivos
- Subida de archivos a tarjetas
- Sincronización de adjuntos
- Gestión de permisos
- Control de versiones

## 3. ENDPOINTS DE LA API UTILIZADOS

### 3.1 Gestión de Tableros
```python
# Obtener listas de un tablero
GET /1/boards/{idBoard}/lists

# Obtener tarjetas de una lista
GET /1/lists/{idList}/cards

# Crear nueva tarjeta
POST /1/cards
```

### 3.2 Gestión de Tarjetas
```python
# Actualizar tarjeta
PUT /1/cards/{idCard}

# Eliminar tarjeta
DELETE /1/cards/{idCard}

# Obtener comentarios
GET /1/cards/{idCard}/actions
```

### 3.3 Gestión de Archivos
```python
# Subir archivo
POST /1/cards/{idCard}/attachments

# Eliminar archivo
DELETE /1/cards/{idCard}/attachments/{idAttachment}
```

## 4. FLUJO DE TRABAJO

### 4.1 Creación de Tarea
1. Usuario crea tarea en el sistema
2. Sistema crea tarjeta en Trello
3. Se asigna a lista correspondiente
4. Se notifica a miembros del equipo

### 4.2 Actualización de Estado
1. Cambio de estado en el sistema
2. Sincronización con Trello
3. Actualización de lista en tablero
4. Notificación a usuarios involucrados

### 4.3 Gestión de Comentarios
1. Comentario creado en sistema/Trello
2. Sincronización bidireccional
3. Actualización en tiempo real
4. Notificaciones a usuarios

## 5. MANEJO DE ERRORES

### 5.1 Errores Comunes
- Problemas de conexión con API
- Credenciales inválidas
- Límites de API excedidos
- Conflictos de sincronización

### 5.2 Estrategias de Recuperación
- Reintentos automáticos
- Cola de sincronización
- Logging de errores
- Notificaciones de fallos

## 6. CONSIDERACIONES DE SEGURIDAD

### 6.1 Autenticación
- Uso de API Key y Token
- Renovación periódica de tokens
- Validación de permisos
- Control de acceso por equipo

### 6.2 Protección de Datos
- Encriptación de credenciales
- Validación de datos
- Sanitización de entradas
- Control de acceso a archivos

## 7. MONITOREO Y MANTENIMIENTO

### 7.1 Métricas de Sincronización
- Tiempo de respuesta
- Tasa de éxito
- Errores por tipo
- Uso de API

### 7.2 Tareas de Mantenimiento
- Limpieza de datos obsoletos
- Optimización de consultas
- Actualización de credenciales
- Respaldo de datos

## 8. EJEMPLOS DE USO

### 8.1 Creación de Tarea
```python
def crear_tarjeta_trello(idBoard, nombre_tarea, descripcion):
    # Obtener primera lista del tablero
    url_listas = f"https://api.trello.com/1/boards/{idBoard}/lists"
    params = {"key": TRELLO_API_KEY, "token": TRELLO_API_TOKEN}
    resp = requests.get(url_listas, params=params)
    
    if resp.status_code == 200 and resp.json():
        idList = resp.json()[0]['id']
        
        # Crear tarjeta
        url_card = "https://api.trello.com/1/cards"
        params = {
            "idList": idList,
            "name": nombre_tarea,
            "desc": descripcion,
            "key": TRELLO_API_KEY,
            "token": TRELLO_API_TOKEN
        }
        resp = requests.post(url_card, params=params)
        
        if resp.status_code == 200:
            return resp.json()['id']
    return None
```

### 8.2 Sincronización de Estado
```python
def mover_tarjeta_a_hecho(idCardTrello, equipo_id):
    # Obtener lista "Completado"
    conn = get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute('SELECT idBoard, idListDone FROM equipos WHERE id = %s', (equipo_id,))
    row = cursor.fetchone()
    
    if row and row['idListDone']:
        # Mover tarjeta
        url = f"https://api.trello.com/1/cards/{idCardTrello}"
        params = {
            "idList": row['idListDone'],
            "key": TRELLO_API_KEY,
            "token": TRELLO_API_TOKEN
        }
        resp = requests.put(url, params=params)
        return resp.status_code == 200
    return False
```

## 9. LIMITACIONES Y CONSIDERACIONES

### 9.1 Límites de API
- 100 requests por 10 segundos
- 1000 requests por día
- Tamaño máximo de archivos
- Límites de almacenamiento

### 9.2 Mejores Prácticas
- Caché de respuestas
- Batch de operaciones
- Manejo de rate limiting
- Optimización de consultas

## 10. SOLUCIÓN DE PROBLEMAS

### 10.1 Problemas Comunes
- Errores de autenticación
- Problemas de sincronización
- Conflictos de datos
- Errores de API

### 10.2 Pasos de Depuración
1. Verificar credenciales
2. Comprobar logs de error
3. Validar respuestas API
4. Revisar estado de sincronización 