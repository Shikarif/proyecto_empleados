# COMENTARIOS Y LÓGICA DEL CÓDIGO JAVASCRIPT

## 1. ARCHIVOS PRINCIPALES

### 1.1 main.js
```javascript
/**
 * Archivo principal de JavaScript que maneja la lógica core del sistema
 * 
 * Funcionalidades principales:
 * - Inicialización de componentes
 * - Gestión de eventos globales
 * - Configuración de Socket.IO
 * - Manejo de autenticación
 */

// Inicialización de Socket.IO para notificaciones en tiempo real
const socket = io({
    reconnection: true,
    reconnectionDelay: 1000,
    reconnectionDelayMax: 5000
});

// Evento de conexión exitosa
socket.on('connect', function() {
    console.log('Conectado al servidor de notificaciones');
    // Inicializar listeners de notificaciones
    inicializarNotificaciones();
});

// Evento de reconexión
socket.on('reconnect', function() {
    console.log('Reconectado al servidor');
    // Sincronizar estado pendiente
    sincronizarEstadoPendiente();
});
```

### 1.2 tareas.js
```javascript
/**
 * Módulo de gestión de tareas
 * 
 * Responsabilidades:
 * - Creación y edición de tareas
 * - Control de temporizadores
 * - Sincronización con Trello
 * - Gestión de estados
 */

// Función para crear nueva tarea
function crearTarea(datos) {
    /**
     * Crea una nueva tarea en el sistema y Trello
     * 
     * @param {Object} datos - Datos de la tarea
     * @param {string} datos.titulo - Título de la tarea
     * @param {string} datos.descripcion - Descripción detallada
     * @param {string} datos.prioridad - Nivel de prioridad
     * @param {number} datos.equipo_id - ID del equipo
     * 
     * @returns {Promise} Promesa con el resultado de la operación
     */
    return new Promise((resolve, reject) => {
        // Validar datos
        if (!validarDatosTarea(datos)) {
            reject(new Error('Datos inválidos'));
            return;
        }

        // Crear tarea en el sistema
        realizarPeticion('/tareas/nueva', 'POST', datos)
            .then(response => {
                // Crear tarjeta en Trello
                return crearTarjetaTrello(response.tarea_id, datos);
            })
            .then(trelloResponse => {
                // Actualizar interfaz
                actualizarListaTareas();
                resolve(trelloResponse);
            })
            .catch(error => {
                mostrarError('Error al crear tarea: ' + error.message);
                reject(error);
            });
    });
}
```

### 1.3 notificaciones.js
```javascript
/**
 * Módulo de sistema de notificaciones
 * 
 * Funcionalidades:
 * - Recepción de notificaciones en tiempo real
 * - Gestión de notificaciones no leídas
 * - Sonidos y alertas visuales
 * - Persistencia de estado
 */

// Configuración de notificaciones
const configNotificaciones = {
    sonido: true,
    desktop: true,
    duracion: 5000,
    posicion: 'top-right'
};

// Función para mostrar notificación
function mostrarNotificacion(datos) {
    /**
     * Muestra una notificación al usuario
     * 
     * @param {Object} datos - Datos de la notificación
     * @param {string} datos.tipo - Tipo de notificación (info, exito, error)
     * @param {string} datos.mensaje - Mensaje a mostrar
     * @param {string} datos.titulo - Título de la notificación
     */
    
    // Crear elemento de notificación
    const notificacion = document.createElement('div');
    notificacion.className = `notificacion notificacion-${datos.tipo}`;
    
    // Agregar contenido
    notificacion.innerHTML = `
        <h4>${datos.titulo}</h4>
        <p>${datos.mensaje}</p>
    `;
    
    // Reproducir sonido si está habilitado
    if (configNotificaciones.sonido) {
        reproducirSonidoNotificacion(datos.tipo);
    }
    
    // Mostrar notificación
    document.body.appendChild(notificacion);
    
    // Eliminar después de la duración configurada
    setTimeout(() => {
        notificacion.remove();
    }, configNotificaciones.duracion);
}
```

### 1.4 trello.js
```javascript
/**
 * Módulo de integración con Trello
 * 
 * Responsabilidades:
 * - Sincronización bidireccional
 * - Gestión de tarjetas
 * - Manejo de archivos adjuntos
 * - Control de estados
 */

// Función para sincronizar con Trello
function sincronizarTrello() {
    /**
     * Realiza la sincronización bidireccional con Trello
     * 
     * Proceso:
     * 1. Obtiene cambios locales
     * 2. Obtiene cambios de Trello
     * 3. Resuelve conflictos
     * 4. Actualiza ambos sistemas
     */
    
    // Mostrar indicador de carga
    mostrarCargando('Sincronizando con Trello...');
    
    // Obtener cambios locales
    obtenerCambiosLocales()
        .then(cambiosLocales => {
            // Obtener cambios de Trello
            return obtenerCambiosTrello()
                .then(cambiosTrello => {
                    // Resolver conflictos
                    return resolverConflictos(cambiosLocales, cambiosTrello);
                });
        })
        .then(cambiosResueltos => {
            // Aplicar cambios
            return aplicarCambios(cambiosResueltos);
        })
        .then(() => {
            // Actualizar interfaz
            actualizarInterfaz();
            mostrarExito('Sincronización completada');
        })
        .catch(error => {
            mostrarError('Error en sincronización: ' + error.message);
        })
        .finally(() => {
            // Ocultar indicador de carga
            ocultarCargando();
        });
}
```

### 1.5 temporizadores.js
```javascript
/**
 * Módulo de gestión de temporizadores
 * 
 * Funcionalidades:
 * - Control de tiempo de tareas
 * - Temporizadores múltiples
 * - Persistencia de estado
 * - Sincronización con backend
 */

// Clase para manejar temporizadores
class Temporizador {
    /**
     * Constructor del temporizador
     * 
     * @param {number} tareaId - ID de la tarea
     * @param {number} tiempoInicial - Tiempo inicial en segundos
     */
    constructor(tareaId, tiempoInicial = 0) {
        this.tareaId = tareaId;
        this.tiempo = tiempoInicial;
        this.activo = false;
        this.intervalo = null;
    }
    
    /**
     * Inicia el temporizador
     */
    iniciar() {
        if (this.activo) return;
        
        this.activo = true;
        this.intervalo = setInterval(() => {
            this.tiempo++;
            this.actualizarInterfaz();
            this.sincronizarBackend();
        }, 1000);
    }
    
    /**
     * Pausa el temporizador
     */
    pausar() {
        if (!this.activo) return;
        
        this.activo = false;
        clearInterval(this.intervalo);
        this.sincronizarBackend();
    }
}
```

## 2. ARCHIVOS DE UTILIDADES

### 2.1 utils.js
```javascript
/**
 * Módulo de utilidades generales
 * 
 * Funcionalidades:
 * - Formateo de datos
 * - Validaciones
 * - Funciones helper
 * - Utilidades de fecha y hora
 */

// Función para formatear fecha
function formatearFecha(fecha, formato = 'DD/MM/YYYY') {
    /**
     * Formatea una fecha según el formato especificado
     * 
     * @param {Date|string} fecha - Fecha a formatear
     * @param {string} formato - Formato deseado
     * @returns {string} Fecha formateada
     */
    
    const date = new Date(fecha);
    
    // Mapeo de formatos
    const formatos = {
        'DD': date.getDate().toString().padStart(2, '0'),
        'MM': (date.getMonth() + 1).toString().padStart(2, '0'),
        'YYYY': date.getFullYear(),
        'HH': date.getHours().toString().padStart(2, '0'),
        'mm': date.getMinutes().toString().padStart(2, '0'),
        'ss': date.getSeconds().toString().padStart(2, '0')
    };
    
    // Reemplazar formatos
    return formato.replace(/DD|MM|YYYY|HH|mm|ss/g, match => formatos[match]);
}
```

### 2.2 validaciones.js
```javascript
/**
 * Módulo de validaciones
 * 
 * Responsabilidades:
 * - Validación de formularios
 * - Validación de datos
 * - Mensajes de error
 * - Reglas de validación
 */

// Función para validar formulario
function validarFormulario(formulario, reglas) {
    /**
     * Valida un formulario según las reglas especificadas
     * 
     * @param {HTMLFormElement} formulario - Formulario a validar
     * @param {Object} reglas - Reglas de validación
     * @returns {boolean} true si el formulario es válido
     */
    
    let esValido = true;
    const errores = {};
    
    // Iterar sobre cada campo
    for (const [campo, regla] of Object.entries(reglas)) {
        const valor = formulario[campo].value;
        
        // Aplicar reglas
        if (regla.requerido && !valor) {
            errores[campo] = 'Este campo es requerido';
            esValido = false;
        }
        
        if (regla.patron && !regla.patron.test(valor)) {
            errores[campo] = regla.mensaje;
            esValido = false;
        }
    }
    
    // Mostrar errores
    if (!esValido) {
        mostrarErrores(errores);
    }
    
    return esValido;
}
```

## 3. ARCHIVOS DE COMPONENTES

### 3.1 modales.js
```javascript
/**
 * Módulo de gestión de modales
 * 
 * Funcionalidades:
 * - Apertura y cierre de modales
 * - Gestión de contenido dinámico
 * - Eventos de modal
 * - Animaciones
 */

// Clase para manejar modales
class Modal {
    /**
     * Constructor del modal
     * 
     * @param {string} id - ID del modal
     * @param {Object} opciones - Opciones de configuración
     */
    constructor(id, opciones = {}) {
        this.id = id;
        this.elemento = document.getElementById(id);
        this.opciones = {
            animacion: true,
            cerrarConClick: true,
            cerrarConEsc: true,
            ...opciones
        };
        
        this.inicializar();
    }
    
    /**
     * Inicializa el modal
     */
    inicializar() {
        // Configurar eventos
        if (this.opciones.cerrarConClick) {
            this.elemento.addEventListener('click', (e) => {
                if (e.target === this.elemento) {
                    this.cerrar();
                }
            });
        }
        
        if (this.opciones.cerrarConEsc) {
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    this.cerrar();
                }
            });
        }
    }
}
```

### 3.2 tabs.js
```javascript
/**
 * Módulo de gestión de pestañas
 * 
 * Funcionalidades:
 * - Cambio de pestañas
 * - Contenido dinámico
 * - Persistencia de estado
 * - Eventos de cambio
 */

// Función para inicializar pestañas
function inicializarTabs(contenedor) {
    /**
     * Inicializa el sistema de pestañas
     * 
     * @param {HTMLElement} contenedor - Contenedor de pestañas
     */
    
    const tabs = contenedor.querySelectorAll('.tab');
    const contenidos = contenedor.querySelectorAll('.tab-content');
    
    // Configurar eventos
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // Desactivar todas las pestañas
            tabs.forEach(t => t.classList.remove('active'));
            contenidos.forEach(c => c.classList.remove('active'));
            
            // Activar pestaña seleccionada
            tab.classList.add('active');
            const contenido = contenedor.querySelector(`#${tab.dataset.target}`);
            contenido.classList.add('active');
            
            // Disparar evento de cambio
            const evento = new CustomEvent('tabChange', {
                detail: {
                    tabId: tab.id,
                    contenidoId: contenido.id
                }
            });
            contenedor.dispatchEvent(evento);
        });
    });
}
```

## 4. ARCHIVOS DE CONFIGURACIÓN

### 4.1 config.js
```javascript
/**
 * Módulo de configuración global
 * 
 * Responsabilidades:
 * - Configuración de la aplicación
 * - Variables globales
 * - Constantes del sistema
 * - Configuración de entorno
 */

// Configuración global
const CONFIG = {
    // API endpoints
    API: {
        BASE_URL: '/api',
        TAREAS: '/tareas',
        USUARIOS: '/usuarios',
        EQUIPOS: '/equipos'
    },
    
    // Configuración de Trello
    TRELLO: {
        API_URL: 'https://api.trello.com/1',
        TIMEOUT: 5000,
        REINTENTOS: 3
    },
    
    // Configuración de UI
    UI: {
        ANIMACIONES: true,
        TEMA: 'light',
        IDIOMA: 'es'
    },
    
    // Configuración de notificaciones
    NOTIFICACIONES: {
        DURACION: 5000,
        SONIDO: true,
        DESKTOP: true
    }
};
```

### 4.2 constants.js
```javascript
/**
 * Módulo de constantes del sistema
 * 
 * Responsabilidades:
 * - Definición de constantes
 * - Enumeraciones
 * - Valores por defecto
 * - Configuraciones fijas
 */

// Estados de tareas
const ESTADOS_TAREA = {
    PENDIENTE: 'pendiente',
    EN_PROGRESO: 'en_progreso',
    COMPLETADA: 'completada',
    CANCELADA: 'cancelada'
};

// Roles de usuario
const ROLES = {
    JEFE: 'jefe',
    LIDER: 'lider',
    PRACTICANTE: 'practicante'
};

// Tipos de notificación
const TIPOS_NOTIFICACION = {
    INFO: 'info',
    EXITO: 'exito',
    ERROR: 'error',
    ALERTA: 'alerta'
};

// Configuración de archivos
const CONFIG_ARCHIVOS = {
    TAMANO_MAXIMO: 10 * 1024 * 1024, // 10MB
    TIPOS_PERMITIDOS: ['image/jpeg', 'image/png', 'application/pdf'],
    RUTA_UPLOADS: '/uploads'
};
``` 